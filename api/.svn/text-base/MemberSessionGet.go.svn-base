package api

import (
	"encoding/json"
	"fmt"
	"github.com/user/apiserver/app"
	"net/http"
	"strings"
)

func MemberSessionGet(r *http.Request) (int, []byte) {

	var o MemberSession

	//----------------------------------------------------------
	// get the sessionID from the URL
	//----------------------------------------------------------
	tmp := strings.Split(strings.TrimRight(r.URL.Path[1:], "/"), "/")
	if len(tmp) != 2 {
		app.Error(fmt.Sprintf("MemberSessionGet() - INVALID_INPUT_FORMAT"))
		e := make(map[string]string)
		e["ERROR"] = "INVALID_INPUT_FORMAT"
		b, _ := json.Marshal(e)
		return 404, b
	}
	sessionID := tmp[1]

	//----------------------------------------------------------
	// run the query to get the records from the database
	//----------------------------------------------------------
	sql := "SELECT m.memberID, m.firstName, m.lastName, m.email, m.zipCode, m.gender, " +
		"m.facebookUserID, m.twitterUsername, ms.loginType " +
		"FROM MEMBER m " +
		"JOIN MEMBER_SESSION ms ON m.memberID = ms.memberID " +
		"WHERE ms.sessionID = ? AND ms.logoffTime IS NULL"
	app.Debug(sql)
	row := app.Db.QueryRow(sql, sessionID)

	//----------------------------------------------------------
	// parse the database row into the output variable
	//----------------------------------------------------------
	err := row.Scan(&o.MemberID, &o.FirstName, &o.LastName, &o.Email, &o.ZipCode, &o.Gender, &o.FacebookID, &o.Twitter, &o.LoginType)
	if err != nil {
		e := make(map[string]string)
		if err.Error() == "sql: no rows in result set" {
			app.Error("INVALID_SESSION_ID")
			e["ERROR"] = "INVALID_SESSION_ID"
		} else {
			app.Error(err.Error())
			e["ERROR"] = fmt.Sprintf("%s", err)
		}

		b, _ := json.Marshal(e)
		return 403, b
	}
	o.SessionID = sessionID

	//---------------------------------------------------
	// convert the output type into json and return it
	//---------------------------------------------------
	x := make(map[string]MemberSession)
	x["MemberSession"] = o

	output, err := json.Marshal(x)
	if err != nil {
		panic(err)
	}

	// app.Info(fmt.Sprintf("returned session for sessionID[%s]  - memberID[%d]  username[%s]", sessionID, o.MemberID, o.LocalUsername))
	return 0, output
}
